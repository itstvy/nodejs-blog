HTTP Protocol
- là cách thức mà website của bạn được truyền tải qua internet 
Khi bạn truy cập website thì nó tải rất là nhanh, bạn không nhận ra được điều gì vừa xảy ra
Nhưng thực tế khi bạn gõ website và enter 1 cái
> thì việc đầu tiên trình duyệt bạn sẽ gửi 1 cái yêu cầu (request) lên máy chủ (server)
và nó dựa vào cái URL thì server biết được là nên trả về cái gì (ví dụ trả về trang chủ)
thì server sẽ lấy dữ liệu trả về

--------------------

Nodejs
Là 1 cái runtime environment (môi trường chạy) cho javascript
npm init 

npm install express

--------------------

npm i nodemon --save-dev
Dùng nodemon để khi file có thay đổi thì nó sẽ tự động reload lại server
Không cần phải Ctrl C rồi chạy lại Server

Thêm trong file package.json
"scripts": {
    "start": "nodemon index.js",
}
Lệnh chạy thay cho node index.js -> npm start

Thêm --inspect vào
"scripts": {
    "start": "nodemon --inspect index.js",
}
để dùng devtool của nodejs, ta có thể debug ứng dụng trong đây

Đẩy code lên git
tạo file .gitignore để bỏ những cái không cần đẩy lên

----------------

Thư viện morgan giúp quan sát được những cái log của những request
từ phía client lên phía node server
'HTTP request logger middleware for node.js'
Việc mình request lên web nhưng không thể nhìn thấy những cái log gì,
bạn không biết được rằng liệu server của bạn có nhận được request gì hay không
--> thì morgan sẽ giúp bạn log cái request (logger cái http request)
giúp bạn có thể thấy được cái log của những request gửi lên node server của bạn

* middleware * - được hiểu là trung gian

------------

Template engines (handlebars)
Giúp viết file chứa code html ở những nơi khác gọn gàng hơn
Nó tương tự như ta code html thủ công như viết html trong file index.html
import 
const { engine } = require("express-handlebars");

//Template engine
app.engine(
  "hbs",
  engine({
    extname: ".hbs",
  })
);
app.set("view engine", "hbs");
app.set("views", path.join(__dirname, "resources\\views"));

Tạo các folder và file .hbs tương ứng


--------------
Tạo folder scss trong resources
và  folder css trong public

Dùng thư viện node-sass
 npm i node-sass --save-dev
--> mục đích để viết scss sau đó nó compile ra css
--> ta sẽ KHÔNG code trong css mà code trong scss để nó biên dịch ra

Thêm vào script
 "scripts": {
    "watch": "node-sass -w src/resources/scss/ --output src/public/css/",
 }
 Thêm file nodemon.json 


----------------
2 cách chạy project
npm start để chạy nodejs - web server của nodejs
npm run watch để lắng nghe sự thay đổi của file scss
----------------

Bootstrap 4
Thêm CSS vào trước link css
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">

Thêm Javascript bootstrap vào cuối sau thẻ đóng của trước body
để tăng tốc độ load của website bởi vì nếu để lên trên head thì
website render nó sẽ bị delay quá trình render
<script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/popper.js@1.12.9/dist/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>


---------------------------------
Basic Routing

Routing: giúp bạn định nghĩa tuyến đường để có thể truy cập vào website
URL sẽ sử dụng phương thức của giao thức HTTP (GET, POST, PUT, ... so on)

Mỗi tuyến đường bạn định nghĩa ra sẽ có thể có
1 hoặc nhiều function handler ( 1 function để xử lý cái việc gì đó)

Ở đây function này nó sẽ thực thi cái route của bạn
khi user truy cập vào website nó sẽ match (khớp) với cái route của bạn.
Để định nghĩa cái route thì bạn tuân thủ theo cú pháp như sau:
--> app.METHOD (PATH, HANDLER)

app: khi dùng express thì mình import nó 
xong rồi mình tạo biến app sau đó khởi chạy thực thi thằng express đó
và express nó đã được xây dựng sẵn rồi, nó là framework
và khi bạn chạy nó sẽ trả lại bạn một cái instance của ứng dụng của chúng ta

METHOD: là một trong những cái phương thức của giao thức HTTP (như PUT PATCH GET DELETE,..)
Và định nghĩa trong route thì nên viết METHOD dạng chữ thường vd: app.get

PATH: là đường dẫn ở trên server của bạn/ định nghĩa tuyến tường trên source code trên nodejs
Thực ra chính code nodejs mà ta đang code đây chính là ta đang code trên Server
Khi ta npm start là nó đang khởi tạo web server trên chính máy chúng ta (localhost)
Tuy nhiên sau này bạn cũng chạy như này nhưng chạy trên cái máy chủ
mà các bạn thuê ở bên ngoài thì các bạn sẽ gọi là Remote host/ Cloud server / Remote server

HANDLER: trong javascript đa phần tất cả handler đang nhắc đến function chính là callback
là 1 function (hàm) sẽ được excuted (thực thi) khi mà cái route của chúng ta nó khớp

Ví dụ:
app.get("/", (req, res) => {
  res.render("home");
});

"/": là PATH
(req, res) => {
  res.render("home");
} : là function handler, function này sẽ được gọi lại khi mà tuyến đường nó khớp

req: shorthand của request: yêu cầu
res: shorthand của response: phản hồi

Nhắc lại giao thức HTTP:
Khi bạn truy cập website bấm enter 1 cái nó sẽ gửi 1 cái yêu cầu lên trên server
Thì cái biến request này cho sẽ chưá những cái thông tin mà cái ứng dụng của bạn 
nó được gửi lên server:
(
  Inspect > Network > Header > General:
Nó gửi lên cái url với cái path nó khớp với tuyến đường trên backend của hệ thống
khi nó khớp với cái tuyến đường như vậy, nó sẽ lọt vào 1 cái function handler 
và trong cái function handler nó sẽ nhận được 1 cái gọi là request
như biến req.
Thì biến req nó sẽ chứa tất cả những thông tin mà ứng dụng phía client nó yêu cầu lên trên server
Thì dựa vào yêu cầu đó bạn sẽ biết là thằng client nó muốn lấy cái gì thì ta sẽ xử lý và trả lại cho cái đó

Còn biến res: response
Khi server nó nhận được cái request thì nó sẽ phải xử lý và khi nó xử lý xong
thì ví dụ cần data thì nó sẽ vào database để lấy dữ liệu và nó sẽ trả về client cho bạn
thì việc trả về nó sẽ phải chờ 1 chút tùy vào tốc độ internet của bạn và tùy vào
cái logic xử lý phức tạp hay ko phức tạp
Và khi việc xử lý xong, nó trả về cho client thì nó chính là những cái dữ liệu
trả về qua tab Response 

Thì biến res nó sẽ giúp bạn có thể tùy chọn cấu hình setup 
làm sao cho cái việc trả về client, trả về như thế nào, trả về cái gì 
Ví dụ trả về status code: 304 hay trả về mã html... thì dùng biến response
)
(req, res) => {
  res.render("home");
}
thì biến res chấm render như này là do bạn đang tích hợp với cái engine
là handlebars để bạn có thể render ra views
thì chính việc render này nó vẫn là việc quyết định trả về client cái gì
 với thằng
  res.render("home"); mặc đình trả về status code là 200
  và nó sẽ trả về code html chứa ở trong file view.
  ------------------------------------

  GET METHOD - Get dùng để lấy dữ liệu từ SERVER trả về CLIENT  
  GET xảy ra khi nào?
  Khi truy cập vào 1 website or click vào thẻ a chứa link dẫn 
  thì mặc định trình duyệt nó sẽ gửi đi phương thức là GET

---------------------
Query Parameter


Thường sử dụng trong phương thức GET
là khái niệm giúp bạn có thể truyền được dữ liệu qua chính URL của bạn
Ví dụ: google.com/search?q=nodejs
thì gg sẽ tìm kiếm nodejs thay vì mình vào gg rồi mới tìm kiếm nodejs và nhấn enter

google.com/search?q=nodejs

app.get("/search", (req, res) => {
  console.log(req.query.q);
  res.render("search");
});

q=nodejs

---------------------
Default behavior of HTML forms - Tìm hiểu hành vi mặc định của forms trong HTML
Khi tạo ra 1 cái form có 1 cái button type: submit
có 1 cái input có name="q" thì khi bấm nút button nó sẽ thực hiện hành vi gọi là submit
và nó sẽ đính tất cả cái input có name ở trong form này lên thằng query parameter
và với phương thức là GET.

Hành vi là nó cứ lấy cái input có name thì nó lấy cái value của name đó
và nó truyền lên URL dưới dạng query parameter kể cả ko nhập gì nó cũng truyền
ví dụ:
q= nodejs
fullName= Vy Nguyễn
age= 18

Thì mặc định form nó sẽ là submit dưới cái METHOD là GET
thì có cách nào để chỉ định cái METHOD GET hay POST cho form khi bấm nút submit hay không?
==> CÓ

ở form mặc định nó sẽ là GET
nhưng nếu ta thêm <form method="POST">

app.post("/search", (req, res) => {
  res.render("search");
});

Sau đó bấm submit thì nó sẽ chuyển qua phương thức POST ngay.
Tuy nhiên có 1 vấn đề, kể từ khi bấm submit thì khi ta có reload lại trang
thì nó vẫn ở phương thức POST không còn là GET nữa.
Chỉ khi ta truy cập vào lại website nó mới là GET
==> bài sau sẽ nói rõ

Quay lại form, khi search và submit 
thì nó sẽ đính query parameter trên chính URL trang search như này
http://localhost:3000/search?q=nodejs
Thì đây là hành vi mặc định của form mà

Nhưng giờ bạn lại muốn nó submit tại trang news thì làm sao?
ở form mặc định action nó sẽ trống như sau: <form method="GET" action=""> 
Cái action này nó thể hiện chúng ta sẽ submit ở đâu, ở URL nào!!!
method là submit ở phương thức nào!!!

Nếu bạn không nhập hoặc để trống action 
thì mặc định nó sẽ ăn vào chính cái URL mà đang chứa cái form của bạn
và nó đính cái query parameter tại URL đó

Nếu hiện tại đang ở trang search nhưng action="/news"
thì khi bạn search nodejs và submit ở trang search nó sẽ chuyển hướng đến trang news
và nó mang theo cái query parameter theo lên trang news:
http://localhost:3000/news?q=nodejs

-----------------------
POST method

Sử dụng GET khi bạn muốn nhận dữ liệu từ SERVER trả về CLIENT
==> POST thì ngược lại
Bạn sẽ sử dụng method POST khi bạn muốn gửi dữ liệu từ phía CLIENT lên trên SERVER

Trình duyệt, mobile app là phía Client
API là phía Server
Trong khóa này thì ta code ứng dụng gọi là Server Rendering

Thêm và sửa
 <form method="POST" action="">
app.post("/search", (req, res) => {
  res.send("");
});

sau đó search và submit với phương thức POST 
thì nó cũng sẽ lấy cái thẻ mà có name=q nó sẽ submit dưới dạng form data
không còn là query parameter nữa, không đính trên URL nữa vì nó là form data nó ẩn đi rồi

Thêm chọn giới tính vào
app.post("/search", (req, res) => {
  console.log(req.body);
  res.send("");
});

** Phân biệt hành vi của form dưới phương thức GET và POST
==Với phương thức GET thì form sẽ được gửi đi dưới dạng query parameters đính trên URL
==Với phương thức POST thì form sẽ được gửi đi dưới dạng form data và không đính trên URL

Cái việc lấy dữ liệu khi gửi qua query parameter thì dùng
req.query
Còn gửi qua form data thì dùng
req.body

Ở bài trước khi ta req.query thì nó sẽ trả về được
nhưng bài này req.body nó sẽ trả về undefine lý do là express nó chưa tích hợp
nên ta sẽ sử dụng middleware để xử lý cái sự submit lên form cho chúng ta bằng cách khai báo
==> app.use(express.urlencoded());

thêm 1 cái nữa vì đôi khi sẽ có trường hợp gửi dữ liệu từ client lên server
1 là qua việc submit html như ta đang làm
2 là qua việc bạn sử dụng những thư viện trong js
hoặc là code js để bạn submit ví dụ như XMLHttpRequest, fetch, axios,...
Tất cả những thằng đó nó sẽ gửi dữ liệu với method GET hay POST đều được
và có thể gửi lên server chứ không phải dưới dạng form như ta đang làm nữa
==> app.use(express.json());

Tóm lại gửi dưới dạng html thì dùng ==> app.use(express.urlencoded());

Gửi dưới dạng code javascript lên thì dùng ==> app.use(express.json());

Giờ khi refresh lại cái body ta đang gửi là q và gender
 thì ở terminal nó sẽ nhận được object
{ q: 'nodejs', gender: 'Male' }
 thay vì lúc nảy là undefine

Tuy nhiên terminal có 1 cái warning: 
body-parser deprecated undefined extended: provide extended option src\index.js:9:17

Tức là nó bắt bạn phải cho 1 cái object có cái key là extended vào ở dòng 9
app.use(
  express.urlencoded({
    extended: true,
  })
);
Thực ra nó là 1 cái options của cái thư viện thôi
Bản thân thằng express có được cái phương thức urlencoded và json là vì nó sử dụng thư viện body-parser 
nhưng do express phiên bản từ 4.16 đã tích hợp sẵn rồi nên không cần cài nữa

Vậy thì tại sao thằng body-parser nó lại trả lại được cái body request
vì nó sử dụng thằng qs - viết tắt: querystring 
nó làm nhiệm vụ parser ra cho bạn từ những cái như
a = c thì nó sẽ parse ra object là a: "c" 

-----------------------------

Mô hình MVC
M: Model
V: View
C: Controller
Mô hình này được sử dụng rất nhiều khi bạn xây dựng ứng dụng chạy phía backend 
Ví dụ: Nodejs, PHP, Java, Ruby,...
Hiệu quả của mô hình MVC là gì?
Bình thường nếu không theo mô hình thì bạn sẽ BẠ đâu CODE đấy
Nhưng nếu dự án lớn thì sao quản lý được?

Thì cái ưu điểm của mô hình MVC là việc bóc tách thành phần cho bạn
ra thành 3 thành phần chính là Model, View, Controller
View: chỉ chứa thành phần file view (HTML/CSS) thôi
Model: là thành phần tương tác với data source, resource của ta thôi để ta tương tác lấy ra dữ liệu từ trong database
Controller: là thành phần trung chuyển giữa View và Model, thì tại sao như vậy?

Giả dụ khi gõ vào trình duyệt 1 cái website thì nó sẽ request lên server với HTTP protocol
Đi qua Server bắt đầu nó đi lên tầng Routes (với phương thức gì, path gì, truy cập, thực thi đoạn code gì)
sau đó nó đi đến tầng Dispatcher nghĩa là hành vi gọi sang Controller

Khi routes định tuyến được đúng cái tuyến đường ta cần thì nó sẽ chọt vào thằng Controller tương ứng
Ví dụ ở trang chủ ta cần lấy dữ liệu 
Thì khi nó đi đến Controller của trang chủ và trong trang chủ ta cần lấy dữ liệu

Thì thằng Controller nó sẽ tương tác với thằng Model để nó lấy ra dữ liệu ở database MySQL hay MongoDB,..
Nó lấy xong nó để vào Controller sau đó nó gọi sang View để lấy View tương ứng 
sau đó nó xử lý và nó đứng ở Controller nó lấy data từ Model sau đó truyền sang View
Khi đó nó sẽ lấy được View hoàn chỉnh bao gồm dữ liệu vừa lấy 
Và bắt đầu nó trả về cho Client, đi qua Server trả về qua Response qua HTTP protocol
Trình duyệt nhận được và hiển thị ra website

Nắm được cái mô hình này thì triển khai code dễ dàng!!!

----------------------------

Ôn lại kiến thức
Khi bạn đứng tại trình duyệt tức là đang đứng ở Browser chính là Client
thì làm thể nào để gửi 1 cái Request lên Server? 
Chính là việc ta truy cập vào website đó (nhập url và enter)
==> Hành động truy cập website là làm được việc đứng từ Client gửi Request lên Server 

Bạn biết được rằng website trên chính máy của bạn gọi là: Local host 
và khi bạn muốn website mà người dùng có thể truy cập vào được 
thì thường thường bạn sẽ đi mua/thuê 1 cái Hosting đúng chứ?

Local host và Hosting chính là 1, là host, là server, cùng đóng 1 vai trò nhiệm vụ thôi
==> Hosting là gì? Là nơi để lưu trữ 

Local là cục bộ, là máy tính của bạn và bạn đang run 1 cái host trên chính máy của bạn
Thì đây là cái host nằm trên cái máy cục bộ của bạn
==> Thì bản thân cái local host nó cũng đóng vai trò là 1 Server

----------------------------
MVC - Routes & Controllers
Thay đổi SourceCode đi theo mô hình MVC

Tóm lại ta đã tạo được cái web server listening port 3000
Giờ từ Web Server --> vào Route như thế nào? Routes là gì?

Khi bạn start lên Web Server thì với thằng Nodejs nó sẽ chọc vào cài entry point của chúng ta
tức là thằng index.js và nó nạp tất cả những cái nội dung trong file index.js này vào trong bộ nhớ RAM
Thì mình đang đứng ở Web Server và chọc vào thằng Routes thì chọc như thế nào?

Nếu code thuần thì phải tự code ra thằng Routes nhưng ta đang sử dụng Framework Express
thế nên nó không những cấu hình Web Server mà còn nó còn cấu hình cho cả Routes

Thì Routes nó chính là thằng bạn đang dùng đây:
==> app.post("/search")
app: là nhận từ express
.post: chấm phương thức (GET, POST, PUT, DELETE,...)
/search :và định nghĩa là cái đối số dưới dạng cái tuyến đường, cái routes name

Thì đó chính là việc đang sử dụng thành phần Routes
và từ Routes nó đi đến Dispatcher 

Dispatcher là gì?
Khi cái routes bạn truy cập vào website các bạn gõ /search 
nó sẽ chọc lên Web Server > sẽ chọc vào Entry point index.js của ta đã được nạp vào bộ nhớ
nó sẽ đọc được đoạn này:

app.get("/search", (req, res) => {
  res.render("search");
});
và nó thấy match với nhau thì lập tức nó sẽ execute (thực thi) cái function: 

(req, res) => {
  res.render("search");
}

Hành vi bạn truy cập vào path này: app.get("/search")
thì nó gọi là Action - Hành động

Thì đứng giữa Action này nó có 1 cái gọi là Dispatcher và đằng sau nó là Function Handler
Action --> Dispatcher --> Function Handler

Function Handler: hàm xử lý 
(req, res) => {
  res.render("search");
} --> đây là hàm xử lý được truyền dưới dạng callback 

Tại sao khớp Action thì thằng Function Handler lại chạy?
Vì đứng ở giữa là Dispatcher nó sẽ đọc cái Action nó thấy "à khớp rồi"
nó sẽ thực thi Function Handler 

Trong mô hình MVC, thằng Routes chọc vào Dispatcher, Dispatcher chọc vào Controller 
Thì Controller nó chính là thằng Function Handler này
(req, res) => {
  res.render("search");
}

Nếu như bạn mang thành phần này vào 1 thư mục Controller viết function này vào file js nào đó 
và bạn import nó ra đưa vào index.js thì lúc đó bạn hiểu bạn đã tách được thành phần Controller này ra ngoài

Bạn đã biết Controller nó tương tác với View và Model
Thì đây Controller - Function Handler, tương tác với View 
(req, res) => {
  res.render("search");
}
Ta thấy với cái path này ta cần tải ra/render ra cái View là search năm trong resources/views/search.hbs
==> Đây chính là tương tác giữa Controller với View

Controller tương tác với Model như nào? Bài sau nói !!!
Trong bài này ta sẽ tách Routes, Controller, Model ra những thư mục khác

-------------------------------

Tạo thư mục Routes, app/controllers trong src
Làm thế nào viết được những file trong mục routes, controllers

Ví dụ news: tạo 1 file new.js trong routes và NewsController.js trong controller
Bây giờ việc của chúng ta là bóc tách đoạn này
app.get("/news", (req, res) => {
  res.render("news");
});

app.get("/news",==> ta sẽ đưa vào news.js

(req, res) => {
  res.render("news");
}); ==> ta sẽ đưa vào NewsController

Giờ viết NewController.js trước
tạo ra 1 class NewsController {
  viết 1 cái method cho nó
  cần 1 cái phương thức để đại diện cho function handler này 
  phương thức này nó lấy ra trang chủ của tin tức thì đặt là index
}

" class NewsController {
  // [GET] /news
  index(req, res) {
    res.render("news");
  }
}

module.exports = new NewsController(); //tạo ra 1 đối tượng của NewsController và exports ra ngoài "
file NewsController chút nữa sẽ required nó vào src/index.js
Tạo file routes/index.js mục đích là chuyển hết code trong src/index.js cũ qua (Đã code)

-------------------------
Giờ cấu hình file route cho thằng news
Vào đây tham khảo cách viết https://expressjs.com/en/4x/api.html#router.use

Nó sẽ hướng dẫn bạn cách viết 1 cấu hình route tách ra ngoài 

Học được thư mục routes và controller
src/index.js  -- Truyền instance express vào route: route(app) 
routes/index.js -- app.use("/news", newsRouter); 
nó sẽ sử dụng (use) newsRouter cho path nó match (khớp) là /news và siteRouter thì dùng cho path nó match là /
path sẽ đọc từ trên xuống 
Thì khi match với /news/ nó sẽ chọc vào thằng newsRouter nó sẽ đọc ở file news.js (newsRouter cấp con của news)
Thì nó sẽ xem router nó match với tuyến đường nào, ví dụ http://localhost:3000/news/
Thì nó hiểu là khớp (match) với thằng "/" :
router.use("/", newsController.index); 
và lao vào function handler index mà ta đã viết ở NewsController
  index(req, res) {
    res.render("news");
  }

--------------------------------

Cài MongoDB - vào mongodb.com/try
Tìm MongoDB Compass: nó chính là MongoDB Client để bạn có thể truy xuất được vào database của các bạn
Tìm MongoDB Community Server, để nguyên cấu hình đừng đổi, bấm download

Thư mục lưu cấu hình cài
C:\Program Files\MongoDB\Server\7.0\data\
C:\Program Files\MongoDB\Server\7.0\log\
Cài xong nó sẽ mở MongoDB Compass đây chính là cái Client tool
để bạn có thể connect được với thằng MongoDB. MongoDB sau khi cài xong thì nó sẽ chạy ngầm

Mặc định nó sẽ chạy ở localhost:27017
Giờ việc của mình sẽ dán chuỗi connection vào 
mongodb://localhost:27017 bấm connect

---------------------------
Prettier - Lint-staged - Husky

Tìm hiểu về thư viện Prettier giúp trình bày code đẹp hơn gọn hơn
và kết hợp thêm 2 thằng nữa là: lint-staged và husky dùng cho team 
giúp cho ta khi commit code lên thì thằng Prettier sẽ chạy
(Vì cho dù các thành viên trong team có trình bày code lệch lạc, lộn xộn
thì cuối cùng khi họ commit code lên Git thì sẽ được thằng Prettier đưa về 1 quy chuẩn mà do chúng ta cấu hình)

Lint-staged: giúp bạn chạy 1 cái dòng lệnh trên những file được add vào git (file chưa được add thì nó không chạy)
Husky: cung cấp cho chúng ta các cái hooks (hooks)
==> cài lệnh: npm i prettier lint-staged husky --save-dev
==> Dùng extension cho lẹ

--------------------------

MVC - Routes & Controllers
Thay đổi SourceCode đi theo mô hình MVC
Chúng ta đã bóc tách thành phần ra thư mục Routes (để chứa những cái định nghĩa tuyến đường cho phép truy cập website)
và Controller rồi. View thì đã làm trước rồi nằm trong Resources/Views

Giờ ta sẽ làm tiếp phần Model !!!
Làm quen với Compass và tạo Database 
Tìm hiểu và cài đặt Mongoose
Connect - Kết nối to  Mongo Database
Create - Tạo Model

Nhắc lại MongoDB Compass là 1 cái Client giúp bạn connect được tới Server MongoDB
Mở MongoDB Compass > Connect > Create Database 

Database Name: f8_education_dev
Collection: courses (Collection cũng gần giống như table bên MySQL)
Trong courses > Add data > Insert Document > Add field > Insert
{
  "_id": {
    "$oid": "660baad537ec3360370a234c"
  },
  "name": "Xây dựng web với NodeJS & ExpressJS",
  "description": "Học Back-end với Node & ExpressJS framework, hiểu các khái niệm khi làm Back-end và xây dựng RESTful API cho trang web.",
  "image": "https://files.fullstack.edu.vn/f8-prod/courses/6.png"
}
Vậy là xong thao tác thủ công tạo 1 document cho collection

Tìm hiểu Mongoose vào link: https://github.com/Automattic/mongoose
Nó là trình điều khiển, nó đứng giữa thằng Nodejs và MongoDB 
Khi bạn dùng Nodejs làm việc với MongoDB thì thằng Mongoose nó đứng giữa giúp bạn làm việc dễ dàng hơn

Tính chất của MySQL - CSDL quan hệ thì tất cả những record trong 1 table của nó
sẽ cùng có những cái field giống nhau, theo 1 tổ chức cố định theo format

Nhưng document của MongoDB thì nó không nhất thiết cùng 1 format
Ví dụ: 
document 1:
"name" : "vy",
"id" : 123

document 2:
"id": 123,
"test" : "test value"

rõ ràng 2 document này khác nhau, không cùng cấu trúc nhưng vẫn tạo ra được

Thì bắt đầu nó sinh ra những vấn đề như sau:
*Ưu điểm: 
- Bạn muốn sử dụng mỗi document không giống nhau thì dùng MongoDB quá hợp lý luôn
- Không cần định nghĩa field, cứ insert document, field,.. thì nó ghi vào

*Nhược điểm:
- Nhưng nếu bạn muốn tạo ra CSDL mà nó có những đặc điểm giống nhau như: 
các khóa học đều có field giống nhau như đều có tên, có mô tả, có ảnh,...
Thì nếu sử dụng MongoDB thì ta sẽ cảm thấy không được chặt chẽ 

Thế nên bạn sử dụng thằng Mongoose vào nó sẽ giúp bạn quản lý, mô hình hóa thằng document
này dưới dạng đối tượng và nó sẽ giúp bạn quản lý những cái field chặt chẽ hơn.
Nó giúp bạn định nghĩa ra 1 đối tượng, 1 document nó sẽ có những cái field gì, 
kiểu dữ liệu của những field đó là gì,..

==> Nên sử dụng Mongoose để làm việc với MongoDB dễ dàng hơn


Giúp làm việc với MongoDB chặt chẽ hơn
Mongoose là công cụ giúp ta mô hình hóa cho Document của MongoDB, 
nó được thiết kế để làm việc với môi trường bất đồng bộ (môi trường của javascript)
Hỗ trợ cả promises và callback để xử lý bất đồng bộ
==> lệnh cài npm i mongoose

Cách sử dụng mongoose:
 ==> import vào
//Using Node.js 'require()'
const mongoose = require('mongoose') 

Tạo ra config (cấu hình) đơn giản cho MongoDB
Tạo config/db/index.js
Viết ra hàm để connect với MongoDB:

==> Connect to MongoDB
Trong db/index.js tạo ra 1 function tên là connect  để connect tới MongoDB
Sau đó đi đến src/index.js để import db vào
const route = require("./routes");
const db = require("./config/db");

//Connect to DB
db.connect();

Create - Tạo Model (Defining a Model) - Sử dụng 1 cái interface gọi là Schema 
Ta đã taọ 1 collection là courses nên giờ cần tạo model cho courses 
Tại thư mục app tạo file models/Course.js
Sau khi cấu hình cho Model xong rồi thì ta sẽ sử dụng Model này để chọc vào Database
Theo mô hình MVC => Đứng từ Controller chọc sang Model để lấy dữ l

Vào SiteController.js cấu hình
  // [GET] /
  async index(req, res) {
    try {
      const courses = await Course.find({});
      res.json(courses);
    } catch (error) {
      res.status(400).json({ error: "ERROR!!!" });
    }
  }

nó sẽ hiển thị dữ liệu trong DB lên giao diện

------------------------

Cài đặt JSON viewer cho Chrome để nhìn dữ liệu JSON hiển thị trên chrome
Sửa Route methods trong file news.js và site.js route.use thành route.get
Sửa lại resources path cũng trong src/index.js

------------------------
Sửa lại code (cách viết với promises) trong SiteController
Giờ việc của ta là sửa lại giao diện HTML/CSS trang home để render các courses
Để làm được thì ta cần truyền biến courses sang trang views/home.hbs - app.scss

------------------------
Code Detail Courses
Ta đã code giao diện các khóa học tại trang home.
Nhiệm vụ bài này ta sẽ làm trang chi tiết của từng khóa học
Khi ta ở trang chủ thì URL ta là: http://localhost:3000/
Khi ta click vào từng khóa học thì URL ta sẽ phải thay đổi ví dụ như:
http://localhost:3000/html-css
Thì cái html-css: gọi là slug
Ví dụ khóa HTML & CSS sẽ là: /html-css, Javascript cơ bản thì là: /js-co-backend
Mỗi khóa học sẽ có 1 cái slug khác nhau, Từ cái slug ta sẽ truyền lên URL
Bởi cái tính chất nó khác nhau, mỗi một khóa học là 1 slug duy nhất
 > để ta có thể tìm được khóa học duy nhất trong database

Thì cái slug này ta phải tự thêm vào trong database thôi
Công việc của bài này sẽ là như này
Khi ta click vào 1 khóa học nào đó, nó cần phải chuyển hướng đên URL như ví dụ:
http://localhost:3000/html-css nhưng ta chưa cấu hình URL thì sao mà có

Trước hết vào home.hbs cấu hình, dùng thẻ a vào để chuyển hướng this.slug
Tiếp theo đi viết routes cho nó > tạo file routes/courses.js và CourseController
Thêm thằng courses vào index.js app.get("/courses", courseRouter)
Khi truy cập vào URL có path /courses nó sẽ match với thằng "/courses"
và nó sẽ nhào vào thằng courseRouter và nó thấy cái /:slug
Thì nó sẽ tự match với thằn slug của từng khóa học
sau đó nó lao vào coursesController có phương thức show thì nó sẽ res.send("COURSE DETAIL)

Giờ ta cần lấy ra chuỗi html-css vì phải dựa vào chuỗi slug này thì mới biết chọc vào database 
để lấy bản ghi nào, lấy cái nào có đúng thằng có slug là html-css để làm giao diện

Cách lấy chuỗi slug
class CourseController {
  // [GET] /courses/:slug
  show(req, res, next) {
    Course.findOne({ slug: req.params.slug })
      .then((course) => {
        res.json(course);
      })
      .catch(next);
  }
}

Giờ làm giao diện tạo trong thư mục views courses/show.hbs
Có chỉnh sửa trong CourseController

---------------------------

Create Course - Tạo khóa học
Cấu hình route cho nó trước ví dụ: /courses/create
Vào courses.js thêm router.get("/create", courseController.create);

Vào CourseController để tạo phương thức create cho hành động tạo mới này.
Thêm cấu hình create vào test thử tuyến đường courses/create

Sau đó tạo file views cho nó là courses/create.hbs và viết UI cho nó
Giờ ta sẽ đi điều chỉnh hành vi của form - xem lại bài Query Parameters + Form default behavior

Thêm phương thức POST với action="/courses/store"
Tại routes/courses.js cấu hình thêm tuyến đường với phương thức POST router.post 
và trỏ vào thằng (/store) để nó lao vào thằng store trong CourseController

Thì khi ta submit form của create.hbs nó sẽ submit dữ liệu sang path đã đặt trong action="/courses/store" 
và nó sẽ lọt vào thằng store trong CourseController
Thế nên việc lưu dữ liệu ta sẽ xử lý ở thằng store trong CourseController

Còn việc hiển thị form create thì ta ở xử lý ở thằng create trong CourseController

Giờ thì test thử điền vào form và submit xem nó đã hiển thị dữ liệu ta đã nhập vào form chưa.
  store(req, res, next) {
    res.json(req.body);
  }
Sau khi hiển thị dữ liệu rồi ta sẽ lưu nó vào database
  store(req, res, next) {
    const formData = req.body;
    formData.image = `https://img.youtube.com/vi/${req.body.videoId}/sddefault.jpg`;
    const course = new Course(formData);
    course.save();
  }
Lưu ý muốn lưu những cái trường dữ liệu như "name", "description",v.v
Thì phải đảm bảo trong model phải định nghĩa tất cả các trường đó thì nó mới lưu được
==> nên kiểm tra file courses.js trong folder Model
Sau khi cấu hình lưu dữ liệu mới vào database và đẩy nó về trang chủ:
  store(req, res, next) {
    const formData = req.body;
    formData.image = `https://img.youtube.com/vi/${req.body.videoId}/sddefault.jpg`;
    const course = new Course(formData);
    course
      .save()
      .then(() => res.redirect("/"))
      .catch((error) => {});
  }

Thì ta sẽ đi cấu hình slug cho các khóa mới tạo, vì ta đâu thể nào điền slug vào khi tạo.
Ta sẽ sử dụng thư viện
npm i mongoose-slug-generator nó là 1 plugin cho thằng mongoose
Thế nên mở file model ra và ta sẽ add thằng plugin này trong file model luôn
Cấu hình
 slug: { type: String, slug: "name", unique: true },
unique là duy nhất, để nó không trùng slug với thằng khóa học khác (nếu có trường hợp tạo 1 thằng y chang)
Khi lỡ tạo 1 khóa học giống cái đã từng tạo thì thằng slug nó sẽ tạo 1 chuỗi short-hand ngắn để phân biệt

-------------------------------

Update Course - Tạo trang Chỉnh sửa và cập nhật khóa học

Đầu tiên vào sửa UI patials/header 1 chút
Trước khi ta làm form chỉnh sửa ý, thì ta phải có 1 cái trang quản lý những khóa học đã đăng
Thêm giao diện và cấu hình route cho thằng me
        <li class="nav-item">
          <a class="nav-link" href="/me/stored/courses">Khóa học của tôi</a>
        </li>

        <li class="nav-item">
          <a class="nav-link" href="/me/stored/courses">Bài viết của tôi</a>
        </li>
Cứ review code là biết cấu hình chỗ nào

--------------------------------

Delete Course - Xóa khóa học
Xây dựng UI nút xóa khóa học trong stored-courses.hbs (Khóa học của tôi)
Sau đó thêm form xác nhận xóa khi click vào nút xóa
Vào routes/courses.js set tuyến đường xóa cho nó
router.delete("/:id", courseController.destroy);
và xử lý logic function handler destroy cho nó
ta sẽ xóa bằng id và chuyến hướng về lại trang "Khóa học của tôi" sau khi xóa

Vào stored-courses.hbs để xử lý thêm để xóa bằng id
Khi click vào nút xóa thì nó sẽ lấy id của khóa học 
và khi click vào nút xác nhận xóa thì nó cũng phải lấy id

--------------------------------

Soft delete - Kỹ thuật xóa mềm 
Xóa mềm là gì? Nó được hiểu là Không xóa thật!!

Thế nào là không xóa thật? 
== Khi bạn click vào xóa và xóa bỏ nó, thì bạn sẽ không thấy nó hiển thị trên giao diện nữa
== Nhưng trong database nó vẫn còn tồn tại

Khi nào cần sử dụng kỹ thuật này?
Khi ta tương tác với những dữ liệu cần đối soát, cần truy vết, liên quan tới đơn hàng
tiền tệ, dữ liệu nhạy cảm,.. hoặc bất cứ dữ liệu nào mà bạn cảm thấy sau này mình cần để đối soát, truy vết

Với phương thức deleteOne trong mongoose nó sẽ xóa thật luôn, trong DB sẽ không còn.
Nên ta sẽ sửa lại code 
Ta sẽ xóa theo kiểu là sẽ thêm một cái field vào Database

Vào models/courses.js để thêm thành phần ghi đè
Course.plugin(mongooseDelete, {
  deletedAt: true,
  overrideMethods: "all",
});

Thêm UI khi không có khóa học nào trong "Khóa học của tôi"

Tạo thùng rác để khôi phục khóa học đã xóa
Thêm UI cho thùng rác trash.courses.hbs
Và thêm chức năng khôi phục, xóa vĩnh viễn

--------------------------

Kế nút thùng rác phải có (số lượng khóa học) muốn xóa
Viết lại storedCourses trong MeController để đếm số lượng khóa học đã xóa trong thùng rác

--------------------------

Select all with checkbox 

--------------------------

Khái niệm Middleware trong express

Tại sao lại học  Middleware?
Vì trong thực tế, những trang quản lý rất là nhiều (quản lý nhân viên, khóa học, sinh viên, bình luận,...)
Tất cả những trang quản lý đó đều có chức năng sắp xếp (ví dụ: sắp xếp theo tên, theo ngày tạo,..)
Thì mỗi lần code chức năng đó ta phải code vào controller. Và nếu controller cần nhiều chức năng sắp xếp thì sao?
thì sẽ ta sẽ phải đi copy lại đoạn code đó thì nó sẽ bị lặp lại code, rất mất thời gian.

=> Và để giải quyết vấn đề này thì ta sẽ cần sử dụng middleware, ta sẽ viết nó ra 1 cái function chung.
 Thì mỗi khi ta cần chức năng sắp xếp thì ta chỉ cần code 1,2 dòng thôi là đã có chức năng đó rồi

Middleware là một phần mềm trung gian (đứng giữa các thành phần trong mô hình phần mềm).
Nó làm những nhiệm vụ: kết nối, trung chuyển,, kiểm soát giữa các thành phần.

Ví dụ:
Từ Browser (Client) gửi request lên Server (Web Server)
và từ Server sẽ xử lý phản hồi (response) lại cho Client

Thì khi request lên Server, có 1 ông sẽ đứng chặn ở trước cửa Server
và ông này sẽ kiểm tra xem request này có hợp lệ không, có quyền truy cập không,
có gửi dữ liệu linh tinh không,.. thì ông này chính là Middleware (Middleware giống như bảo vệ ý)

Đây chỉ là ví dụ dễ hiểu.

Middleware có thể tồn tại ở client, ở server, ở database, ở hệ thống, ở mọi nơi
Miễn sao nó đứng giữa 2 thành phần nào đó và nó có thể thực hiện những nhiệm vụ như: kiểm tra, xử lý,..
Nói chung vai trò của nó giống như bác bảo vệ và làm những nhiệm vụ như bảo vệ thì ta mới gọi là middleware

Vai trò của middleware
1. Kiểm soát - validation
2. Không cho phép vào (ví dụ không cho phép client gửi request linh tinh)
3. Cho phép vào 
4. Chỉnh sửa / thay đổi dữ liệu - modification

Middleware trong Express

----------------------------

Xây dựng Middleware cho chức năng sắp xếp
Tạo thư mục app/middlewares
Tạo file sortMiddleware.js

Sử dụng helpers trong index.js để xử lý chức năng sắp xếp
Thêm chức năng sắp xếp cho trang "Khóa học của tôi" 
Xử lý helpers cho tên khóa học, trình độ, thời gian tạo












 

























